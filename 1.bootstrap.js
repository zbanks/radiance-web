(window.webpackJsonp=window.webpackJsonp||[]).push([[1],[,function(n,e,t){"use strict";t.r(e);var r=t(2);t.e(2).then(t.bind(null,21)),Promise.resolve().then(t.bind(null,2)),Promise.all(["radiance-graph","radiance-library"].map(n=>customElements.whenDefined(n))).then((function(){let n=document.querySelector("#graph");const e=new r.Context(document.querySelector("#canvas"),512);n.attachContext(e),window.context=e;const t=[{nodeType:"EffectNode",name:"test",intensity:.7},{nodeType:"EffectNode",name:"resat",intensity:.3},{nodeType:"EffectNode",name:"oscope",intensity:.8},{nodeType:"EffectNode",name:"spin",intensity:.5},{nodeType:"EffectNode",name:"zoomin",intensity:.3},{nodeType:"EffectNode",name:"rjump",intensity:.9},{nodeType:"EffectNode",name:"lpf",intensity:.3},{nodeType:"EffectNode",name:"tunnel",intensity:.7},{nodeType:"EffectNode",name:"melt",intensity:.4},{nodeType:"EffectNode",name:"composite",intensity:.5,nInputs:2},{nodeType:"MediaNode"}].map(e=>n.context.addNode(e));[{fromVertex:0,toVertex:10,toInput:0},{fromVertex:5,toVertex:1,toInput:0},{fromVertex:1,toVertex:9,toInput:1},{fromVertex:2,toVertex:3,toInput:0},{fromVertex:3,toVertex:4,toInput:0},{fromVertex:4,toVertex:5,toInput:0},{fromVertex:5,toVertex:6,toInput:0},{fromVertex:6,toVertex:7,toInput:0},{fromVertex:7,toVertex:8,toInput:0},{fromVertex:8,toVertex:9,toInput:0},{fromVertex:10,toVertex:2,toInput:0}].forEach(e=>{n.context.addEdge(t[e.fromVertex],t[e.toVertex],e.toInput)}),n.context.flush(),console.log(n.context.state()),document.querySelector("#library").attachGraph(n)}))},function(n,e,t){"use strict";t.r(e),function(n){t.d(e,"setup_hooks",(function(){return F})),t.d(e,"DetailLevel",(function(){return M})),t.d(e,"Context",(function(){return L})),t.d(e,"VideoNodeId",(function(){return q})),t.d(e,"__wbindgen_object_drop_ref",(function(){return J})),t.d(e,"__wbindgen_cb_drop",(function(){return $})),t.d(e,"__wbindgen_json_parse",(function(){return G})),t.d(e,"__wbindgen_json_serialize",(function(){return Z})),t.d(e,"__wbindgen_string_new",(function(){return K})),t.d(e,"__wbindgen_object_clone_ref",(function(){return Q})),t.d(e,"__wbg_cargowebsnippet4fd31c9e56d40b8642cf9e6f96fd6b570f355cea_8a401aade62618ba",(function(){return X})),t.d(e,"__wbg_cargowebsnippet199d5eb25dfe761687bcd487578eb7e636bd9650_cab2de567628901e",(function(){return Y})),t.d(e,"__wbg_cargowebsnippet6bcfdb0f4808b0b1e8b8b8d2facd39b73ac5018b_2b46a18b54b44834",(function(){return nn})),t.d(e,"__wbg_cargowebsnippetc5c1b47195f246fcd2672c546e8c4d526e328687_8e9bf2760a8d405c",(function(){return en})),t.d(e,"__wbg_cargowebsnippet114b518968fda2247f8d0d6ad5a226d35aa55986_90291b06311b4650",(function(){return tn})),t.d(e,"__wbg_cargowebsnippet80d6d56760c65e49b7be8b6b01c1ea861b046bf0_5a8953894b8affd6",(function(){return rn})),t.d(e,"__wbg_cargowebsnippete9638d6405ab65f78daf4a5af9c9de14ecf1e2ec_ad1e81894f802539",(function(){return on})),t.d(e,"__wbg_wasmbindgeninitialize_c1c4df6b494511ad",(function(){return un})),t.d(e,"__wbindgen_cb_forget",(function(){return cn})),t.d(e,"__wbg_cargowebsnippet1c30acb32a1994a07c75e804ae9855b43f191d63_6d353463ef525961",(function(){return fn})),t.d(e,"__wbg_cargowebsnippetdc2fd915bd92f9e9c6a3bd15174f1414eee3dbaf_ce5c721cab10d020",(function(){return an})),t.d(e,"__wbg_cargowebsnippet97495987af1720d8a9a923fa4683a7b683e3acd6_a438202dc16f44c0",(function(){return _n})),t.d(e,"__wbg_cargowebsnippet72fc447820458c720c68d0d8e078ede631edd723_ece3da0a4474dbeb",(function(){return dn})),t.d(e,"__wbg_instanceof_Window_a633dbe0900c728a",(function(){return sn})),t.d(e,"__wbg_document_07444f1bbea314bb",(function(){return ln})),t.d(e,"__wbg_navigator_849182c6ea6e2f9a",(function(){return bn})),t.d(e,"__wbg_fetch_995bfe97503f599b",(function(){return gn})),t.d(e,"__wbg_createElement_5a267cb074dc073b",(function(){return pn})),t.d(e,"__wbg_newwithstrandinit_80e5800985bdc350",(function(){return wn})),t.d(e,"__wbg_srcObject_912f785e056a12ea",(function(){return En})),t.d(e,"__wbg_readyState_5bab56f28d32d400",(function(){return yn})),t.d(e,"__wbg_autoplay_1f04bfad6ad4e631",(function(){return hn})),t.d(e,"__wbg_connect_cd8d6d5f1f1c9c32",(function(){return mn})),t.d(e,"__wbg_sampleRate_5e01913ddb3a5eea",(function(){return Tn})),t.d(e,"__wbg_state_2e857b2c4451f1f4",(function(){return An})),t.d(e,"__wbg_new_fe826214e97473b2",(function(){return Pn})),t.d(e,"__wbg_createMediaStreamSource_e2bf11343d7de6ce",(function(){return vn})),t.d(e,"__wbg_createAnalyser_9c55a79a0c4727db",(function(){return Sn})),t.d(e,"__wbg_resume_bcfc78a61414b6c6",(function(){return Dn})),t.d(e,"__wbg_instanceof_HtmlCanvasElement_c6a06fc9a851a478",(function(){return In})),t.d(e,"__wbg_width_e29d6e8a5c409d12",(function(){return Vn})),t.d(e,"__wbg_width_70cc14014c04df22",(function(){return xn})),t.d(e,"__wbg_height_f1097727b2ec35e1",(function(){return Rn})),t.d(e,"__wbg_height_e962cc78d8658712",(function(){return Bn})),t.d(e,"__wbg_getContext_2151b76e11a6eb39",(function(){return jn})),t.d(e,"__wbg_mediaDevices_eb0ae72eca099c17",(function(){return Wn})),t.d(e,"__wbg_clientWidth_44471047d79a1082",(function(){return Hn})),t.d(e,"__wbg_clientHeight_6acfdd877f2417ff",(function(){return On})),t.d(e,"__wbg_getBoundingClientRect_a07c591e191ec8e6",(function(){return Un})),t.d(e,"__wbg_instanceof_WebGlRenderingContext_3aadcbc31d1748d3",(function(){return Cn})),t.d(e,"__wbg_drawingBufferWidth_50e3f45aea4750e2",(function(){return Fn})),t.d(e,"__wbg_drawingBufferHeight_711d2661310b16d2",(function(){return Nn})),t.d(e,"__wbg_bufferData_fbf7f777873e860d",(function(){return zn})),t.d(e,"__wbg_texImage2D_97bf65dbb078a110",(function(){return kn})),t.d(e,"__wbg_texImage2D_814f7fed311eeed4",(function(){return Mn})),t.d(e,"__wbg_uniform1iv_776a799df45df66c",(function(){return Ln})),t.d(e,"__wbg_uniform4fv_1791afa2b91b49d9",(function(){return qn})),t.d(e,"__wbg_activeTexture_284cde3f352835a4",(function(){return Jn})),t.d(e,"__wbg_attachShader_9564db836e3d4ece",(function(){return $n})),t.d(e,"__wbg_bindBuffer_6cc973b0a3488535",(function(){return Gn})),t.d(e,"__wbg_bindFramebuffer_4181a799ddf2e312",(function(){return Zn})),t.d(e,"__wbg_bindTexture_812a67a84575f09d",(function(){return Kn})),t.d(e,"__wbg_clear_c50cee241485d576",(function(){return Qn})),t.d(e,"__wbg_clearColor_ce7ee2c8c34d229d",(function(){return Xn})),t.d(e,"__wbg_compileShader_91ce1c5df480321c",(function(){return Yn})),t.d(e,"__wbg_createBuffer_1b29c13abf687b68",(function(){return ne})),t.d(e,"__wbg_createFramebuffer_6f095514f3318a03",(function(){return ee})),t.d(e,"__wbg_createProgram_0bbeea9ffc5daa63",(function(){return te})),t.d(e,"__wbg_createShader_cdd9f1769cd1de1e",(function(){return re})),t.d(e,"__wbg_createTexture_7fc81a3938b40da8",(function(){return oe})),t.d(e,"__wbg_deleteBuffer_369c55a91d91833d",(function(){return ue})),t.d(e,"__wbg_deleteFramebuffer_0bf6355a8a6a2b2a",(function(){return ce})),t.d(e,"__wbg_deleteProgram_67381e9972f47456",(function(){return ie})),t.d(e,"__wbg_deleteShader_3f597e51ea2d3f7e",(function(){return fe})),t.d(e,"__wbg_deleteTexture_0720702483248edc",(function(){return ae})),t.d(e,"__wbg_disable_ec9704454711d15f",(function(){return _e})),t.d(e,"__wbg_drawArrays_dfc8bd56cfd2c50e",(function(){return de})),t.d(e,"__wbg_enable_afe858cc8ac02cab",(function(){return se})),t.d(e,"__wbg_enableVertexAttribArray_1b8360d81db7d6f0",(function(){return le})),t.d(e,"__wbg_framebufferTexture2D_62da77d1506a7915",(function(){return be})),t.d(e,"__wbg_getAttribLocation_ce1df105f2722b0b",(function(){return ge})),t.d(e,"__wbg_getProgramInfoLog_2a1da5b17664faa9",(function(){return pe})),t.d(e,"__wbg_getProgramParameter_ff1b7fa34d0991f5",(function(){return we})),t.d(e,"__wbg_getShaderInfoLog_5a8842f27648dd20",(function(){return Ee})),t.d(e,"__wbg_getShaderParameter_9fe8d76217a4969c",(function(){return ye})),t.d(e,"__wbg_getUniformLocation_bcdd3b3a38c50a03",(function(){return he})),t.d(e,"__wbg_linkProgram_cba038b57a3871ef",(function(){return me})),t.d(e,"__wbg_pixelStorei_219f6dc606402fc4",(function(){return Te})),t.d(e,"__wbg_scissor_29839ba6a843a0e3",(function(){return Ae})),t.d(e,"__wbg_shaderSource_57dcf3bb9d5a2045",(function(){return Pe})),t.d(e,"__wbg_texParameteri_0538bb1eb7de4f3b",(function(){return ve})),t.d(e,"__wbg_uniform1f_c6b6138ac33617b4",(function(){return Se})),t.d(e,"__wbg_uniform1i_bc5e1e88172a4393",(function(){return De})),t.d(e,"__wbg_uniform2f_c1a2fa4599b15748",(function(){return Ie})),t.d(e,"__wbg_useProgram_324a22a196d1f113",(function(){return Ve})),t.d(e,"__wbg_vertexAttribPointer_0e306f7de4de676a",(function(){return xe})),t.d(e,"__wbg_viewport_e581bdce9dbf078f",(function(){return Re})),t.d(e,"__wbg_instanceof_HtmlElement_7e7a87e33735b8a3",(function(){return Be})),t.d(e,"__wbg_top_ea3d98b5a35c721c",(function(){return je})),t.d(e,"__wbg_right_88203cb2e967e976",(function(){return We})),t.d(e,"__wbg_bottom_ca433884f5e0a43f",(function(){return He})),t.d(e,"__wbg_left_3ec7a67e508d2852",(function(){return Oe})),t.d(e,"__wbg_instanceof_HtmlVideoElement_7cc8674bb9a5b5db",(function(){return Ue})),t.d(e,"__wbg_getUserMedia_8baa33fb0626c558",(function(){return Ce})),t.d(e,"__wbg_width_cbe68f217f04c494",(function(){return Fe})),t.d(e,"__wbg_height_71a5fb80c0635fec",(function(){return Ne})),t.d(e,"__wbg_fftSize_6de6d1aa4dc58c12",(function(){return ze})),t.d(e,"__wbg_frequencyBinCount_5256681391d5a2db",(function(){return ke})),t.d(e,"__wbg_minDecibels_7f6ed356c4c1cea6",(function(){return Me})),t.d(e,"__wbg_maxDecibels_19db1315f281c3f7",(function(){return Le})),t.d(e,"__wbg_smoothingTimeConstant_fc26ce22ef17d41c",(function(){return qe})),t.d(e,"__wbg_getFloatFrequencyData_d43ef4ba596524f0",(function(){return Je})),t.d(e,"__wbg_instanceof_MediaStream_f7a471f906eca128",(function(){return $e})),t.d(e,"__wbg_instanceof_Response_37bf8b595fe4e5cd",(function(){return Ge})),t.d(e,"__wbg_ok_3d82b2a3cb0bf2ae",(function(){return Ze})),t.d(e,"__wbg_statusText_fbd10a9816d23633",(function(){return Ke})),t.d(e,"__wbg_text_3dd7e0ea10b9acc2",(function(){return Qe})),t.d(e,"__wbg_call_804d3ad7e8acd4d5",(function(){return Xe})),t.d(e,"__wbg_newnoargs_ebdc90c3d1e4e55d",(function(){return Ye})),t.d(e,"__wbg_call_1ad0eb4a7ab279eb",(function(){return nt})),t.d(e,"__wbg_new_937729a89a522fb5",(function(){return et})),t.d(e,"__wbg_resolve_3e5970e9c931a3c2",(function(){return tt})),t.d(e,"__wbg_then_d797310661d9e275",(function(){return rt})),t.d(e,"__wbg_then_e37e0b9ef0995585",(function(){return ot})),t.d(e,"__wbg_globalThis_48a5e9494e623f26",(function(){return ut})),t.d(e,"__wbg_self_25067cb019cade42",(function(){return ct})),t.d(e,"__wbg_window_9e80200b35aa30f8",(function(){return it})),t.d(e,"__wbg_global_7583a634265a91fc",(function(){return ft})),t.d(e,"__wbindgen_is_undefined",(function(){return at})),t.d(e,"__wbg_buffer_f897a8d316863411",(function(){return _t})),t.d(e,"__wbg_newwithbyteoffsetandlength_7ccfa06426575282",(function(){return dt})),t.d(e,"__wbg_new_4546c9674ba984b4",(function(){return st})),t.d(e,"__wbg_buffer_43a871734cd7249b",(function(){return lt})),t.d(e,"__wbg_set_5cbed684ac2b1ce9",(function(){return bt})),t.d(e,"__wbg_random_d45f566bef640e60",(function(){return gt})),t.d(e,"__wbindgen_string_get",(function(){return wt})),t.d(e,"__wbindgen_boolean_get",(function(){return Et})),t.d(e,"__wbindgen_debug_string",(function(){return yt})),t.d(e,"__wbindgen_throw",(function(){return ht})),t.d(e,"__wbindgen_rethrow",(function(){return mt})),t.d(e,"__wbindgen_memory",(function(){return Tt})),t.d(e,"__wbindgen_function_table",(function(){return At})),t.d(e,"__wbindgen_closure_wrapper260",(function(){return Pt})),t.d(e,"__wbindgen_closure_wrapper584",(function(){return vt})),t.d(e,"__wbindgen_closure_wrapper582",(function(){return St})),t.d(e,"__wbindgen_closure_wrapper618",(function(){return Dt}));var r=t(16),o=t(14),u=t(15),c=t(20),i=t(19),f=t(18),a=t(17),_=t(9),d=t(13),s=t(12),l=t(11),b=t(10),g=t(8);const p="undefined"!=typeof AudioContext?AudioContext:webkitAudioContext,w=new Array(32).fill(void 0);function E(n){return w[n]}w.push(void 0,null,!0,!1);let y=w.length;function h(n){const e=E(n);return function(n){n<36||(w[n]=y,y=n)}(n),e}let m=new("undefined"==typeof TextDecoder?t(3).TextDecoder:TextDecoder)("utf-8",{ignoreBOM:!0,fatal:!0});m.decode();let T=null;function A(){return null!==T&&T.buffer===g.E.buffer||(T=new Uint8Array(g.E.buffer)),T}function P(n,e){return m.decode(A().subarray(n,n+e))}function v(n){y===w.length&&w.push(w.length+1);const e=y;return y=w[e],w[e]=n,e}let S=0;let D=new("undefined"==typeof TextEncoder?t(3).TextEncoder:TextEncoder)("utf-8");const I="function"==typeof D.encodeInto?function(n,e){return D.encodeInto(n,e)}:function(n,e){const t=D.encode(n);return e.set(t),{read:n.length,written:t.length}};function V(n,e,t){if(void 0===t){const t=D.encode(n),r=e(t.length);return A().subarray(r,r+t.length).set(t),S=t.length,r}let r=n.length,o=e(r);const u=A();let c=0;for(;c<r;c++){const e=n.charCodeAt(c);if(e>127)break;u[o+c]=e}if(c!==r){0!==c&&(n=n.slice(c)),o=t(o,r,r=c+3*n.length);const e=A().subarray(o+c,o+r);c+=I(n,e).written}return S=c,o}let x=null;function R(){return null!==x&&x.buffer===g.E.buffer||(x=new Int32Array(g.E.buffer)),x}function B(n){return null==n}function j(n,e,t,r){const o={a:n,b:e,cnt:1},u=(...n)=>{o.cnt++;const e=o.a;o.a=0;try{return r(e,o.b,...n)}finally{0==--o.cnt?g.d.get(t)(e,o.b):o.a=e}};return u.original=o,u}function W(n,e,t){g.i(n,e,v(t))}function H(n,e,t,r){const o={a:n,b:e,cnt:1},u=(...n)=>{o.cnt++;try{return r(o.a,o.b,...n)}finally{0==--o.cnt&&(g.d.get(t)(o.a,o.b),o.a=0)}};return u.original=o,u}function O(n,e,t){return g.k(n,e,t)}function U(n,e,t,r){g.j(n,e,t,r)}function C(n,e,t){g.h(n,e,v(t))}function F(){g.F()}function N(n){g.c(v(n))}let z=null;function k(n,e){return(null!==z&&z.buffer===g.E.buffer||(z=new Float32Array(g.E.buffer)),z).subarray(n/4,n/4+e)}const M=Object.freeze({Export:0,Local:1,All:2});class L{static __wrap(n){const e=Object.create(L.prototype);return e.ptr=n,e}free(){const n=this.ptr;this.ptr=0,g.a(n)}constructor(n,e){var t=g.s(v(n),e);return L.__wrap(t)}render(n){g.A(this.ptr,n)}paintNode(n,e){g.x(this.ptr,v(n),v(e))}clearElement(n){g.o(this.ptr,v(n))}state(){return h(g.D(this.ptr))}addEdge(n,e,t){g.l(this.ptr,v(n),v(e),t)}removeEdge(n,e,t){g.y(this.ptr,v(n),v(e),t)}clear(){g.n(this.ptr)}flush(){return 0!==g.p(this.ptr)}onGraphChanged(n){g.u(this.ptr,v(n))}onNodeChanged(n,e,t){g.w(this.ptr,v(n),v(e),v(t))}addNode(n){return h(g.m(this.ptr,v(n)))}removeNode(n){g.z(this.ptr,v(n))}nodeState(n,e){return h(g.t(this.ptr,v(n),v(e)))}setNodeState(n,e){g.C(this.ptr,v(n),v(e))}library(){return h(g.q(this.ptr))}libraryContent(n){return h(g.r(this.ptr,v(n)))}setEffectSource(n,e){var t=V(n,g.e,g.f),r=S,o=V(e,g.e,g.f),u=S;g.B(this.ptr,t,r,o,u)}onLibraryChanged(n){g.v(this.ptr,v(n))}}class q{free(){const n=this.ptr;this.ptr=0,g.b(n)}}const J=function(n){h(n)},$=function(n){const e=h(n).original;if(1==e.cnt--)return e.a=0,!0;return!1},G=function(n,e){return v(JSON.parse(P(n,e)))},Z=function(n,e){const t=E(e);var r=V(JSON.stringify(void 0===t?null:t),g.e,g.f),o=S;R()[n/4+1]=o,R()[n/4+0]=r},K=function(n,e){return v(P(n,e))},Q=function(n){return v(E(n))},X=function(n,e){Object(_.a)(h(n),e)},Y=function(n,e){Object(b.a)(h(n),e)},nn=function(n,e){Object(l.a)(h(n),e)},en=function(n,e){Object(s.a)(h(n),e)},tn=function(n,e){Object(d.a)(h(n),e)},rn=function(n,e){Object(o.a)(h(n),e)},on=function(n,e){Object(u.a)(h(n),e)},un=function(n,e,t,o){return v(Object(r.a)(h(n),h(e),E(t),E(o)))},cn=function(n){h(n)},fn=function(n){Object(a.a)(h(n))},an=function(n){Object(f.a)(h(n))},_n=function(n,e,t){Object(i.a)(h(n),e,t)},dn=function(n,e,t,r){Object(c.a)(h(n),e,t,r)},sn=function(n){return E(n)instanceof Window},ln=function(n){var e=E(n).document;return B(e)?0:v(e)},bn=function(n){return v(E(n).navigator)},gn=function(n,e){return v(E(n).fetch(E(e)))},pn=function(n,e,t){try{return v(E(n).createElement(P(e,t)))}catch(n){N(n)}},wn=function(n,e,t){try{return v(new Request(P(n,e),E(t)))}catch(n){N(n)}},En=function(n,e){E(n).srcObject=E(e)},yn=function(n){return E(n).readyState},hn=function(n,e){E(n).autoplay=0!==e},mn=function(n,e){try{return v(E(n).connect(E(e)))}catch(n){N(n)}},Tn=function(n){return E(n).sampleRate},An=function(n){return v(E(n).state)},Pn=function(){try{return v(new p)}catch(n){N(n)}},vn=function(n,e){try{return v(E(n).createMediaStreamSource(E(e)))}catch(n){N(n)}},Sn=function(n){try{return v(E(n).createAnalyser())}catch(n){N(n)}},Dn=function(n){try{return v(E(n).resume())}catch(n){N(n)}},In=function(n){return E(n)instanceof HTMLCanvasElement},Vn=function(n){return E(n).width},xn=function(n,e){E(n).width=e>>>0},Rn=function(n){return E(n).height},Bn=function(n,e){E(n).height=e>>>0},jn=function(n,e,t){try{var r=E(n).getContext(P(e,t));return B(r)?0:v(r)}catch(n){N(n)}},Wn=function(n){try{return v(E(n).mediaDevices)}catch(n){N(n)}},Hn=function(n){return E(n).clientWidth},On=function(n){return E(n).clientHeight},Un=function(n){return v(E(n).getBoundingClientRect())},Cn=function(n){return E(n)instanceof WebGLRenderingContext},Fn=function(n){return E(n).drawingBufferWidth},Nn=function(n){return E(n).drawingBufferHeight},zn=function(n,e,t,r){E(n).bufferData(e>>>0,E(t),r>>>0)},kn=function(n,e,t,r,o,u,c,i,f,a,_){try{E(n).texImage2D(e>>>0,t,r,o,u,c,i>>>0,f>>>0,0===a?void 0:(d=a,s=_,A().subarray(d/1,d/1+s)))}catch(n){N(n)}var d,s},Mn=function(n,e,t,r,o,u,c){try{E(n).texImage2D(e>>>0,t,r,o>>>0,u>>>0,E(c))}catch(n){N(n)}},Ln=function(n,e,t,r){var o,u;E(n).uniform1iv(E(e),(o=t,u=r,R().subarray(o/4,o/4+u)))},qn=function(n,e,t,r){E(n).uniform4fv(E(e),k(t,r))},Jn=function(n,e){E(n).activeTexture(e>>>0)},$n=function(n,e,t){E(n).attachShader(E(e),E(t))},Gn=function(n,e,t){E(n).bindBuffer(e>>>0,E(t))},Zn=function(n,e,t){E(n).bindFramebuffer(e>>>0,E(t))},Kn=function(n,e,t){E(n).bindTexture(e>>>0,E(t))},Qn=function(n,e){E(n).clear(e>>>0)},Xn=function(n,e,t,r,o){E(n).clearColor(e,t,r,o)},Yn=function(n,e){E(n).compileShader(E(e))},ne=function(n){var e=E(n).createBuffer();return B(e)?0:v(e)},ee=function(n){var e=E(n).createFramebuffer();return B(e)?0:v(e)},te=function(n){var e=E(n).createProgram();return B(e)?0:v(e)},re=function(n,e){var t=E(n).createShader(e>>>0);return B(t)?0:v(t)},oe=function(n){var e=E(n).createTexture();return B(e)?0:v(e)},ue=function(n,e){E(n).deleteBuffer(E(e))},ce=function(n,e){E(n).deleteFramebuffer(E(e))},ie=function(n,e){E(n).deleteProgram(E(e))},fe=function(n,e){E(n).deleteShader(E(e))},ae=function(n,e){E(n).deleteTexture(E(e))},_e=function(n,e){E(n).disable(e>>>0)},de=function(n,e,t,r){E(n).drawArrays(e>>>0,t,r)},se=function(n,e){E(n).enable(e>>>0)},le=function(n,e){E(n).enableVertexAttribArray(e>>>0)},be=function(n,e,t,r,o,u){E(n).framebufferTexture2D(e>>>0,t>>>0,r>>>0,E(o),u)},ge=function(n,e,t,r){return E(n).getAttribLocation(E(e),P(t,r))},pe=function(n,e,t){var r=E(e).getProgramInfoLog(E(t)),o=B(r)?0:V(r,g.e,g.f),u=S;R()[n/4+1]=u,R()[n/4+0]=o},we=function(n,e,t){return v(E(n).getProgramParameter(E(e),t>>>0))},Ee=function(n,e,t){var r=E(e).getShaderInfoLog(E(t)),o=B(r)?0:V(r,g.e,g.f),u=S;R()[n/4+1]=u,R()[n/4+0]=o},ye=function(n,e,t){return v(E(n).getShaderParameter(E(e),t>>>0))},he=function(n,e,t,r){var o=E(n).getUniformLocation(E(e),P(t,r));return B(o)?0:v(o)},me=function(n,e){E(n).linkProgram(E(e))},Te=function(n,e,t){E(n).pixelStorei(e>>>0,t)},Ae=function(n,e,t,r,o){E(n).scissor(e,t,r,o)},Pe=function(n,e,t,r){E(n).shaderSource(E(e),P(t,r))},ve=function(n,e,t,r){E(n).texParameteri(e>>>0,t>>>0,r)},Se=function(n,e,t){E(n).uniform1f(E(e),t)},De=function(n,e,t){E(n).uniform1i(E(e),t)},Ie=function(n,e,t,r){E(n).uniform2f(E(e),t,r)},Ve=function(n,e){E(n).useProgram(E(e))},xe=function(n,e,t,r,o,u,c){E(n).vertexAttribPointer(e>>>0,t,r>>>0,0!==o,u,c)},Re=function(n,e,t,r,o){E(n).viewport(e,t,r,o)},Be=function(n){return E(n)instanceof HTMLElement},je=function(n){return E(n).top},We=function(n){return E(n).right},He=function(n){return E(n).bottom},Oe=function(n){return E(n).left},Ue=function(n){return E(n)instanceof HTMLVideoElement},Ce=function(n,e){try{return v(E(n).getUserMedia(E(e)))}catch(n){N(n)}},Fe=function(n){return E(n).width},Ne=function(n){return E(n).height},ze=function(n,e){E(n).fftSize=e>>>0},ke=function(n){return E(n).frequencyBinCount},Me=function(n,e){E(n).minDecibels=e},Le=function(n,e){E(n).maxDecibels=e},qe=function(n,e){E(n).smoothingTimeConstant=e},Je=function(n,e,t){E(n).getFloatFrequencyData(k(e,t))},$e=function(n){return E(n)instanceof MediaStream},Ge=function(n){return E(n)instanceof Response},Ze=function(n){return E(n).ok},Ke=function(n,e){var t=V(E(e).statusText,g.e,g.f),r=S;R()[n/4+1]=r,R()[n/4+0]=t},Qe=function(n){try{return v(E(n).text())}catch(n){N(n)}},Xe=function(n,e){try{return v(E(n).call(E(e)))}catch(n){N(n)}},Ye=function(n,e){return v(new Function(P(n,e)))},nt=function(n,e,t){try{return v(E(n).call(E(e),E(t)))}catch(n){N(n)}},et=function(){return v(new Object)},tt=function(n){return v(Promise.resolve(E(n)))},rt=function(n,e){return v(E(n).then(E(e)))},ot=function(n,e,t){return v(E(n).then(E(e),E(t)))},ut=function(){try{return v(globalThis.globalThis)}catch(n){N(n)}},ct=function(){try{return v(self.self)}catch(n){N(n)}},it=function(){try{return v(window.window)}catch(n){N(n)}},ft=function(){try{return v(n.global)}catch(n){N(n)}},at=function(n){return void 0===E(n)},_t=function(n){return v(E(n).buffer)},dt=function(n,e,t){return v(new Float32Array(E(n),e>>>0,t>>>0))},st=function(n){return v(new Float32Array(E(n)))},lt=function(n){return v(E(n).buffer)},bt=function(n,e,t){try{return Reflect.set(E(n),E(e),E(t))}catch(n){N(n)}},gt="function"==typeof Math.random?Math.random:(pt="Math.random",()=>{throw new Error(pt+" is not defined")});var pt;const wt=function(n,e){const t=E(e);var r="string"==typeof t?t:void 0,o=B(r)?0:V(r,g.e,g.f),u=S;R()[n/4+1]=u,R()[n/4+0]=o},Et=function(n){const e=E(n);return"boolean"==typeof e?e?1:0:2},yt=function(n,e){var t=V(function n(e){const t=typeof e;if("number"==t||"boolean"==t||null==e)return""+e;if("string"==t)return`"${e}"`;if("symbol"==t){const n=e.description;return null==n?"Symbol":`Symbol(${n})`}if("function"==t){const n=e.name;return"string"==typeof n&&n.length>0?`Function(${n})`:"Function"}if(Array.isArray(e)){const t=e.length;let r="[";t>0&&(r+=n(e[0]));for(let o=1;o<t;o++)r+=", "+n(e[o]);return r+="]",r}const r=/\[object ([^\]]+)\]/.exec(toString.call(e));let o;if(!(r.length>1))return toString.call(e);if(o=r[1],"Object"==o)try{return"Object("+JSON.stringify(e)+")"}catch(n){return"Object"}return e instanceof Error?`${e.name}: ${e.message}\n${e.stack}`:o}(E(e)),g.e,g.f),r=S;R()[n/4+1]=r,R()[n/4+0]=t},ht=function(n,e){throw new Error(P(n,e))},mt=function(n){throw h(n)},Tt=function(){return v(g.E)},At=function(){return v(g.d)},Pt=function(n,e,t){return v(j(n,e,36,C))},vt=function(n,e,t){return v(H(n,e,96,O))},St=function(n,e,t){return v(H(n,e,96,U))},Dt=function(n,e,t){return v(j(n,e,106,W))};g.g()}.call(this,t(4))},function(n,e,t){(function(n){var r=Object.getOwnPropertyDescriptors||function(n){for(var e=Object.keys(n),t={},r=0;r<e.length;r++)t[e[r]]=Object.getOwnPropertyDescriptor(n,e[r]);return t},o=/%[sdj%]/g;e.format=function(n){if(!w(n)){for(var e=[],t=0;t<arguments.length;t++)e.push(i(arguments[t]));return e.join(" ")}t=1;for(var r=arguments,u=r.length,c=String(n).replace(o,(function(n){if("%%"===n)return"%";if(t>=u)return n;switch(n){case"%s":return String(r[t++]);case"%d":return Number(r[t++]);case"%j":try{return JSON.stringify(r[t++])}catch(n){return"[Circular]"}default:return n}})),f=r[t];t<u;f=r[++t])g(f)||!h(f)?c+=" "+f:c+=" "+i(f);return c},e.deprecate=function(t,r){if(void 0!==n&&!0===n.noDeprecation)return t;if(void 0===n)return function(){return e.deprecate(t,r).apply(this,arguments)};var o=!1;return function(){if(!o){if(n.throwDeprecation)throw new Error(r);n.traceDeprecation?console.trace(r):console.error(r),o=!0}return t.apply(this,arguments)}};var u,c={};function i(n,t){var r={seen:[],stylize:a};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),b(t)?r.showHidden=t:t&&e._extend(r,t),E(r.showHidden)&&(r.showHidden=!1),E(r.depth)&&(r.depth=2),E(r.colors)&&(r.colors=!1),E(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=f),_(r,n,r.depth)}function f(n,e){var t=i.styles[e];return t?"["+i.colors[t][0]+"m"+n+"["+i.colors[t][1]+"m":n}function a(n,e){return n}function _(n,t,r){if(n.customInspect&&t&&A(t.inspect)&&t.inspect!==e.inspect&&(!t.constructor||t.constructor.prototype!==t)){var o=t.inspect(r,n);return w(o)||(o=_(n,o,r)),o}var u=function(n,e){if(E(e))return n.stylize("undefined","undefined");if(w(e)){var t="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return n.stylize(t,"string")}if(p(e))return n.stylize(""+e,"number");if(b(e))return n.stylize(""+e,"boolean");if(g(e))return n.stylize("null","null")}(n,t);if(u)return u;var c=Object.keys(t),i=function(n){var e={};return n.forEach((function(n,t){e[n]=!0})),e}(c);if(n.showHidden&&(c=Object.getOwnPropertyNames(t)),T(t)&&(c.indexOf("message")>=0||c.indexOf("description")>=0))return d(t);if(0===c.length){if(A(t)){var f=t.name?": "+t.name:"";return n.stylize("[Function"+f+"]","special")}if(y(t))return n.stylize(RegExp.prototype.toString.call(t),"regexp");if(m(t))return n.stylize(Date.prototype.toString.call(t),"date");if(T(t))return d(t)}var a,h="",P=!1,v=["{","}"];(l(t)&&(P=!0,v=["[","]"]),A(t))&&(h=" [Function"+(t.name?": "+t.name:"")+"]");return y(t)&&(h=" "+RegExp.prototype.toString.call(t)),m(t)&&(h=" "+Date.prototype.toUTCString.call(t)),T(t)&&(h=" "+d(t)),0!==c.length||P&&0!=t.length?r<0?y(t)?n.stylize(RegExp.prototype.toString.call(t),"regexp"):n.stylize("[Object]","special"):(n.seen.push(t),a=P?function(n,e,t,r,o){for(var u=[],c=0,i=e.length;c<i;++c)I(e,String(c))?u.push(s(n,e,t,r,String(c),!0)):u.push("");return o.forEach((function(o){o.match(/^\d+$/)||u.push(s(n,e,t,r,o,!0))})),u}(n,t,r,i,c):c.map((function(e){return s(n,t,r,i,e,P)})),n.seen.pop(),function(n,e,t){if(n.reduce((function(n,e){return e.indexOf("\n")>=0&&0,n+e.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60)return t[0]+(""===e?"":e+"\n ")+" "+n.join(",\n  ")+" "+t[1];return t[0]+e+" "+n.join(", ")+" "+t[1]}(a,h,v)):v[0]+h+v[1]}function d(n){return"["+Error.prototype.toString.call(n)+"]"}function s(n,e,t,r,o,u){var c,i,f;if((f=Object.getOwnPropertyDescriptor(e,o)||{value:e[o]}).get?i=f.set?n.stylize("[Getter/Setter]","special"):n.stylize("[Getter]","special"):f.set&&(i=n.stylize("[Setter]","special")),I(r,o)||(c="["+o+"]"),i||(n.seen.indexOf(f.value)<0?(i=g(t)?_(n,f.value,null):_(n,f.value,t-1)).indexOf("\n")>-1&&(i=u?i.split("\n").map((function(n){return"  "+n})).join("\n").substr(2):"\n"+i.split("\n").map((function(n){return"   "+n})).join("\n")):i=n.stylize("[Circular]","special")),E(c)){if(u&&o.match(/^\d+$/))return i;(c=JSON.stringify(""+o)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(c=c.substr(1,c.length-2),c=n.stylize(c,"name")):(c=c.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),c=n.stylize(c,"string"))}return c+": "+i}function l(n){return Array.isArray(n)}function b(n){return"boolean"==typeof n}function g(n){return null===n}function p(n){return"number"==typeof n}function w(n){return"string"==typeof n}function E(n){return void 0===n}function y(n){return h(n)&&"[object RegExp]"===P(n)}function h(n){return"object"==typeof n&&null!==n}function m(n){return h(n)&&"[object Date]"===P(n)}function T(n){return h(n)&&("[object Error]"===P(n)||n instanceof Error)}function A(n){return"function"==typeof n}function P(n){return Object.prototype.toString.call(n)}function v(n){return n<10?"0"+n.toString(10):n.toString(10)}e.debuglog=function(t){if(E(u)&&(u=n.env.NODE_DEBUG||""),t=t.toUpperCase(),!c[t])if(new RegExp("\\b"+t+"\\b","i").test(u)){var r=n.pid;c[t]=function(){var n=e.format.apply(e,arguments);console.error("%s %d: %s",t,r,n)}}else c[t]=function(){};return c[t]},e.inspect=i,i.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},i.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.isArray=l,e.isBoolean=b,e.isNull=g,e.isNullOrUndefined=function(n){return null==n},e.isNumber=p,e.isString=w,e.isSymbol=function(n){return"symbol"==typeof n},e.isUndefined=E,e.isRegExp=y,e.isObject=h,e.isDate=m,e.isError=T,e.isFunction=A,e.isPrimitive=function(n){return null===n||"boolean"==typeof n||"number"==typeof n||"string"==typeof n||"symbol"==typeof n||void 0===n},e.isBuffer=t(6);var S=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function D(){var n=new Date,e=[v(n.getHours()),v(n.getMinutes()),v(n.getSeconds())].join(":");return[n.getDate(),S[n.getMonth()],e].join(" ")}function I(n,e){return Object.prototype.hasOwnProperty.call(n,e)}e.log=function(){console.log("%s - %s",D(),e.format.apply(e,arguments))},e.inherits=t(7),e._extend=function(n,e){if(!e||!h(e))return n;for(var t=Object.keys(e),r=t.length;r--;)n[t[r]]=e[t[r]];return n};var V="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function x(n,e){if(!n){var t=new Error("Promise was rejected with a falsy value");t.reason=n,n=t}return e(n)}e.promisify=function(n){if("function"!=typeof n)throw new TypeError('The "original" argument must be of type Function');if(V&&n[V]){var e;if("function"!=typeof(e=n[V]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(e,V,{value:e,enumerable:!1,writable:!1,configurable:!0}),e}function e(){for(var e,t,r=new Promise((function(n,r){e=n,t=r})),o=[],u=0;u<arguments.length;u++)o.push(arguments[u]);o.push((function(n,r){n?t(n):e(r)}));try{n.apply(this,o)}catch(n){t(n)}return r}return Object.setPrototypeOf(e,Object.getPrototypeOf(n)),V&&Object.defineProperty(e,V,{value:e,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(e,r(n))},e.promisify.custom=V,e.callbackify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');function t(){for(var t=[],r=0;r<arguments.length;r++)t.push(arguments[r]);var o=t.pop();if("function"!=typeof o)throw new TypeError("The last argument must be of type Function");var u=this,c=function(){return o.apply(u,arguments)};e.apply(this,t).then((function(e){n.nextTick(c,null,e)}),(function(e){n.nextTick(x,e,c)}))}return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),Object.defineProperties(t,r(e)),t}}).call(this,t(5))},function(n,e){var t;t=function(){return this}();try{t=t||new Function("return this")()}catch(n){"object"==typeof window&&(t=window)}n.exports=t},function(n,e){var t,r,o=n.exports={};function u(){throw new Error("setTimeout has not been defined")}function c(){throw new Error("clearTimeout has not been defined")}function i(n){if(t===setTimeout)return setTimeout(n,0);if((t===u||!t)&&setTimeout)return t=setTimeout,setTimeout(n,0);try{return t(n,0)}catch(e){try{return t.call(null,n,0)}catch(e){return t.call(this,n,0)}}}!function(){try{t="function"==typeof setTimeout?setTimeout:u}catch(n){t=u}try{r="function"==typeof clearTimeout?clearTimeout:c}catch(n){r=c}}();var f,a=[],_=!1,d=-1;function s(){_&&f&&(_=!1,f.length?a=f.concat(a):d=-1,a.length&&l())}function l(){if(!_){var n=i(s);_=!0;for(var e=a.length;e;){for(f=a,a=[];++d<e;)f&&f[d].run();d=-1,e=a.length}f=null,_=!1,function(n){if(r===clearTimeout)return clearTimeout(n);if((r===c||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(n);try{r(n)}catch(e){try{return r.call(null,n)}catch(e){return r.call(this,n)}}}(n)}}function b(n,e){this.fun=n,this.array=e}function g(){}o.nextTick=function(n){var e=new Array(arguments.length-1);if(arguments.length>1)for(var t=1;t<arguments.length;t++)e[t-1]=arguments[t];a.push(new b(n,e)),1!==a.length||_||i(l)},b.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=g,o.addListener=g,o.once=g,o.off=g,o.removeListener=g,o.removeAllListeners=g,o.emit=g,o.prependListener=g,o.prependOnceListener=g,o.listeners=function(n){return[]},o.binding=function(n){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(n){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(n,e){n.exports=function(n){return n&&"object"==typeof n&&"function"==typeof n.copy&&"function"==typeof n.fill&&"function"==typeof n.readUInt8}},function(n,e){"function"==typeof Object.create?n.exports=function(n,e){n.super_=e,n.prototype=Object.create(e.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}})}:n.exports=function(n,e){n.super_=e;var t=function(){};t.prototype=e.prototype,n.prototype=new t,n.prototype.constructor=n}},function(n,e,t){"use strict";var r=t.w[n.i];n.exports=r;t(2);r.G()},function(n,e,t){"use strict";function r(n,e){e=n.STDWEB_PRIVATE.to_js(e),console.error(e)}t.d(e,"a",(function(){return r}))},function(n,e,t){"use strict";function r(n,e){e=n.STDWEB_PRIVATE.to_js(e),console.log(e)}t.d(e,"a",(function(){return r}))},function(n,e,t){"use strict";function r(n,e){e=n.STDWEB_PRIVATE.to_js(e),console.debug(e)}t.d(e,"a",(function(){return r}))},function(n,e,t){"use strict";function r(n,e){e=n.STDWEB_PRIVATE.to_js(e),console.info(e)}t.d(e,"a",(function(){return r}))},function(n,e,t){"use strict";function r(n,e){e=n.STDWEB_PRIVATE.to_js(e),console.warn(e)}t.d(e,"a",(function(){return r}))},function(n,e,t){"use strict";function r(n,e){n.STDWEB_PRIVATE.decrement_refcount(e)}t.d(e,"a",(function(){return r}))},function(n,e,t){"use strict";function r(n,e){e=n.STDWEB_PRIVATE.to_js(e),n.STDWEB_PRIVATE.unregister_raw_value(e)}t.d(e,"a",(function(){return r}))},function(n,e,t){"use strict";function r(n,e,t,r){var o={};return o.web_malloc=t,o.web_free=r,o.web_table=e,Object.defineProperty(o,"HEAP8",{get:function(){return new Int8Array(n.buffer)}}),Object.defineProperty(o,"HEAP16",{get:function(){return new Int16Array(n.buffer)}}),Object.defineProperty(o,"HEAP32",{get:function(){return new Int32Array(n.buffer)}}),Object.defineProperty(o,"HEAPU8",{get:function(){return new Uint8Array(n.buffer)}}),Object.defineProperty(o,"HEAPU16",{get:function(){return new Uint16Array(n.buffer)}}),Object.defineProperty(o,"HEAPU32",{get:function(){return new Uint32Array(n.buffer)}}),Object.defineProperty(o,"HEAPF32",{get:function(){return new Float32Array(n.buffer)}}),Object.defineProperty(o,"HEAPF64",{get:function(){return new Float64Array(n.buffer)}}),o}t.d(e,"a",(function(){return r}))},function(n,e,t){"use strict";function r(n){n.STDWEB_PRIVATE={},n.STDWEB_PRIVATE.to_utf8=function(e,t){for(var r=n.HEAPU8,o=0;o<e.length;++o){var u=e.charCodeAt(o);u>=55296&&u<=57343&&(u=65536+((1023&u)<<10)|1023&e.charCodeAt(++o)),u<=127?r[t++]=u:u<=2047?(r[t++]=192|u>>6,r[t++]=128|63&u):u<=65535?(r[t++]=224|u>>12,r[t++]=128|u>>6&63,r[t++]=128|63&u):u<=2097151?(r[t++]=240|u>>18,r[t++]=128|u>>12&63,r[t++]=128|u>>6&63,r[t++]=128|63&u):u<=67108863?(r[t++]=248|u>>24,r[t++]=128|u>>18&63,r[t++]=128|u>>12&63,r[t++]=128|u>>6&63,r[t++]=128|63&u):(r[t++]=252|u>>30,r[t++]=128|u>>24&63,r[t++]=128|u>>18&63,r[t++]=128|u>>12&63,r[t++]=128|u>>6&63,r[t++]=128|63&u)}},n.STDWEB_PRIVATE.noop=function(){},n.STDWEB_PRIVATE.to_js=function(e){var t=n.HEAPU8[e+12];if(0!==t){if(1===t)return null;if(2===t)return n.HEAP32[e/4];if(3===t)return n.HEAPF64[e/8];if(4===t){var r=n.HEAPU32[e/4],o=n.HEAPU32[(e+4)/4];return n.STDWEB_PRIVATE.to_js_string(r,o)}if(5===t)return!1;if(6===t)return!0;if(7===t){r=n.STDWEB_PRIVATE.arena+n.HEAPU32[e/4],o=n.HEAPU32[(e+4)/4];for(var u=[],c=0;c<o;++c)u.push(n.STDWEB_PRIVATE.to_js(r+16*c));return u}if(8===t){var i=n.STDWEB_PRIVATE.arena,f=i+n.HEAPU32[e/4],a=(o=n.HEAPU32[(e+4)/4],i+n.HEAPU32[(e+8)/4]);for(u={},c=0;c<o;++c){var _=n.HEAPU32[(a+8*c)/4],d=n.HEAPU32[(a+4+8*c)/4],s=n.STDWEB_PRIVATE.to_js_string(_,d),l=n.STDWEB_PRIVATE.to_js(f+16*c);u[s]=l}return u}if(9===t)return n.STDWEB_PRIVATE.acquire_js_reference(n.HEAP32[e/4]);if(10===t||12===t||13===t){var b=n.HEAPU32[e/4],g=(r=n.HEAPU32[(e+4)/4],n.HEAPU32[(e+8)/4]),p=0,w=!1;return(u=function(){if(0===r||!0===w)throw 10===t?new ReferenceError("Already dropped Rust function called!"):12===t?new ReferenceError("Already dropped FnMut function called!"):new ReferenceError("Already called or dropped FnOnce function called!");var e=r;if(13===t&&(u.drop=n.STDWEB_PRIVATE.noop,r=0),0!==p&&(12===t||13===t))throw new ReferenceError("FnMut function called multiple times concurrently!");var o=n.STDWEB_PRIVATE.alloc(16);n.STDWEB_PRIVATE.serialize_array(o,arguments);try{p+=1,n.STDWEB_PRIVATE.dyncall("vii",b,[e,o]);var c=n.STDWEB_PRIVATE.tmp;n.STDWEB_PRIVATE.tmp=null}finally{p-=1}return!0===w&&0===p&&u.drop(),c}).drop=function(){if(0===p){u.drop=n.STDWEB_PRIVATE.noop;var e=r;r=0,0!=e&&n.STDWEB_PRIVATE.dyncall("vi",g,[e])}else w=!0},u}if(14===t){r=n.HEAPU32[e/4],o=n.HEAPU32[(e+4)/4];var E=n.HEAPU32[(e+8)/4],y=r+o;switch(E){case 0:return n.HEAPU8.subarray(r,y);case 1:return n.HEAP8.subarray(r,y);case 2:return n.HEAPU16.subarray(r,y);case 3:return n.HEAP16.subarray(r,y);case 4:return n.HEAPU32.subarray(r,y);case 5:return n.HEAP32.subarray(r,y);case 6:return n.HEAPF32.subarray(r,y);case 7:return n.HEAPF64.subarray(r,y)}}else if(15===t)return n.STDWEB_PRIVATE.get_raw_value(n.HEAPU32[e/4])}},n.STDWEB_PRIVATE.serialize_object=function(e,t){var r=Object.keys(t),o=r.length,u=n.STDWEB_PRIVATE.alloc(8*o),c=n.STDWEB_PRIVATE.alloc(16*o);n.HEAPU8[e+12]=8,n.HEAPU32[e/4]=c,n.HEAPU32[(e+4)/4]=o,n.HEAPU32[(e+8)/4]=u;for(var i=0;i<o;++i){var f=r[i],a=u+8*i;n.STDWEB_PRIVATE.to_utf8_string(a,f),n.STDWEB_PRIVATE.from_js(c+16*i,t[f])}},n.STDWEB_PRIVATE.serialize_array=function(e,t){var r=t.length,o=n.STDWEB_PRIVATE.alloc(16*r);n.HEAPU8[e+12]=7,n.HEAPU32[e/4]=o,n.HEAPU32[(e+4)/4]=r;for(var u=0;u<r;++u)n.STDWEB_PRIVATE.from_js(o+16*u,t[u])};var e="function"==typeof TextEncoder?new TextEncoder("utf-8"):"object"==typeof util&&util&&"function"==typeof util.TextEncoder?new util.TextEncoder("utf-8"):null;n.STDWEB_PRIVATE.to_utf8_string=null!=e?function(t,r){var o=e.encode(r),u=o.length,c=0;u>0&&(c=n.STDWEB_PRIVATE.alloc(u),n.HEAPU8.set(o,c)),n.HEAPU32[t/4]=c,n.HEAPU32[(t+4)/4]=u}:function(e,t){var r=n.STDWEB_PRIVATE.utf8_len(t),o=0;r>0&&(o=n.STDWEB_PRIVATE.alloc(r),n.STDWEB_PRIVATE.to_utf8(t,o)),n.HEAPU32[e/4]=o,n.HEAPU32[(e+4)/4]=r},n.STDWEB_PRIVATE.from_js=function(e,t){var r=Object.prototype.toString.call(t);if("[object String]"===r)n.HEAPU8[e+12]=4,n.STDWEB_PRIVATE.to_utf8_string(e,t);else if("[object Number]"===r)t===(0|t)?(n.HEAPU8[e+12]=2,n.HEAP32[e/4]=t):(n.HEAPU8[e+12]=3,n.HEAPF64[e/8]=t);else if(null===t)n.HEAPU8[e+12]=1;else if(void 0===t)n.HEAPU8[e+12]=0;else if(!1===t)n.HEAPU8[e+12]=5;else if(!0===t)n.HEAPU8[e+12]=6;else if("[object Symbol]"===r){var o=n.STDWEB_PRIVATE.register_raw_value(t);n.HEAPU8[e+12]=15,n.HEAP32[e/4]=o}else{var u=n.STDWEB_PRIVATE.acquire_rust_reference(t);n.HEAPU8[e+12]=9,n.HEAP32[e/4]=u}};var t="function"==typeof TextDecoder?new TextDecoder("utf-8"):"object"==typeof util&&util&&"function"==typeof util.TextDecoder?new util.TextDecoder("utf-8"):null;n.STDWEB_PRIVATE.to_js_string=null!=t?function(e,r){return t.decode(n.HEAPU8.subarray(e,e+r))}:function(e,t){for(var r=n.HEAPU8,o=(0|(e|=0))+(0|(t|=0)),u="";e<o;){var c=r[e++];if(c<128)u+=String.fromCharCode(c);else{var i=31&c,f=0;e<o&&(f=r[e++]);var a=i<<6|63&f;if(c>=224){var _=0;e<o&&(_=r[e++]);var d=(63&f)<<6|63&_;if(a=i<<12|d,c>=240){var s=0;e<o&&(s=r[e++]),a=(7&i)<<18|d<<6|63&s,u+=String.fromCharCode(55232+(a>>10)),a=56320+(1023&a)}}u+=String.fromCharCode(a)}}return u},n.STDWEB_PRIVATE.id_to_ref_map={},n.STDWEB_PRIVATE.id_to_refcount_map={},n.STDWEB_PRIVATE.ref_to_id_map=new WeakMap,n.STDWEB_PRIVATE.ref_to_id_map_fallback=new Map,n.STDWEB_PRIVATE.last_refid=1,n.STDWEB_PRIVATE.id_to_raw_value_map={},n.STDWEB_PRIVATE.last_raw_value_id=1,n.STDWEB_PRIVATE.acquire_rust_reference=function(e){if(null==e)return 0;var t=n.STDWEB_PRIVATE.id_to_refcount_map,r=n.STDWEB_PRIVATE.id_to_ref_map,o=n.STDWEB_PRIVATE.ref_to_id_map,u=n.STDWEB_PRIVATE.ref_to_id_map_fallback,c=o.get(e);if(void 0===c&&(c=u.get(e)),void 0===c){c=n.STDWEB_PRIVATE.last_refid++;try{o.set(e,c)}catch(n){u.set(e,c)}}return c in r?t[c]++:(r[c]=e,t[c]=1),c},n.STDWEB_PRIVATE.acquire_js_reference=function(e){return n.STDWEB_PRIVATE.id_to_ref_map[e]},n.STDWEB_PRIVATE.increment_refcount=function(e){n.STDWEB_PRIVATE.id_to_refcount_map[e]++},n.STDWEB_PRIVATE.decrement_refcount=function(e){var t=n.STDWEB_PRIVATE.id_to_refcount_map;if(0==--t[e]){var r=n.STDWEB_PRIVATE.id_to_ref_map,o=n.STDWEB_PRIVATE.ref_to_id_map_fallback,u=r[e];delete r[e],delete t[e],o.delete(u)}},n.STDWEB_PRIVATE.register_raw_value=function(e){var t=n.STDWEB_PRIVATE.last_raw_value_id++;return n.STDWEB_PRIVATE.id_to_raw_value_map[t]=e,t},n.STDWEB_PRIVATE.unregister_raw_value=function(e){delete n.STDWEB_PRIVATE.id_to_raw_value_map[e]},n.STDWEB_PRIVATE.get_raw_value=function(e){return n.STDWEB_PRIVATE.id_to_raw_value_map[e]},n.STDWEB_PRIVATE.alloc=function(e){return n.web_malloc(e)},n.STDWEB_PRIVATE.dyncall=function(e,t,r){return n.web_table.get(t).apply(null,r)},n.STDWEB_PRIVATE.utf8_len=function(n){for(var e=0,t=0;t<n.length;++t){var r=n.charCodeAt(t);r>=55296&&r<=57343&&(r=65536+((1023&r)<<10)|1023&n.charCodeAt(++t)),r<=127?++e:e+=r<=2047?2:r<=65535?3:r<=2097151?4:r<=67108863?5:6}return e},n.STDWEB_PRIVATE.prepare_any_arg=function(e){var t=n.STDWEB_PRIVATE.alloc(16);return n.STDWEB_PRIVATE.from_js(t,e),t},n.STDWEB_PRIVATE.acquire_tmp=function(e){var t=n.STDWEB_PRIVATE.tmp;return n.STDWEB_PRIVATE.tmp=null,t}}t.d(e,"a",(function(){return r}))},function(n,e,t){"use strict";function r(n){console.error("Encountered a panic!")}t.d(e,"a",(function(){return r}))},function(n,e,t){"use strict";function r(n,e,t){console.error("Panic error message:",n.STDWEB_PRIVATE.to_js_string(e,t))}t.d(e,"a",(function(){return r}))},function(n,e,t){"use strict";function r(n,e,t,r){console.error("Panic location:",n.STDWEB_PRIVATE.to_js_string(e,t)+":"+r)}t.d(e,"a",(function(){return r}))}]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,