(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{21:function(t,e,s){"use strict";s.r(e),s.d(e,"Graph",(function(){return h}));class i{constructor(t,e){this.vertices=[],this.edges=[],this.rootVertices=[],this.upstreamEdges=[],this.downstreamEdges=[],t.forEach(t=>{this.addVertex(t)}),e.forEach(t=>{this.addEdge(t)})}upstreamVertexIndex(t,e){const s=this.upstreamEdges[t][e];return void 0===s?void 0:this.edges[s].fromVertex}downstreamVertexIndices(t){return this.downstreamEdges[t].map(t=>this.edges[t].toVertex)}addVertex(t){const e=this.vertices.length;return this.vertices.push(t),this.upstreamEdges.push([]),this.downstreamEdges.push([]),this.rootVertices.push(e),e}addEdge(t){const e=this.edges.length;if(this.edges.push(t),void 0!==this.upstreamEdges[t.toVertex][t.toInput])throw`Vertex ${t.toVertex} input ${t.toInput} has multiple upstream vertices`;this.upstreamEdges[t.toVertex][t.toInput]=e,this.downstreamEdges[t.fromVertex].push(e);let s=this.rootVertices.indexOf(t.fromVertex);s>=0&&this.rootVertices.splice(s,1)}removeVertices(t){let e=[],s=0;this.vertices.forEach((i,n)=>{t.indexOf(n)<0&&(e[n]=s,s++)}),this.vertices=this.vertices.filter((e,s)=>t.indexOf(s)<0),this.rootVertices=this.rootVertices.filter(e=>t.indexOf(e)<0),this.upstreamEdges=this.upstreamEdges.filter((e,s)=>t.indexOf(s)<0),this.downstreamEdges=this.downstreamEdges.filter((e,s)=>t.indexOf(s)<0),this.edges.forEach(t=>{t.fromVertex=e[t.fromVertex],t.toVertex=e[t.toVertex]}),this.rootVertices.forEach((t,s)=>{this.rootVertices[s]=e[t]})}removeEdges(t){let e=t.slice();e.sort((t,e)=>e-t),e.forEach(t=>{this.removeEdge(t)})}removeEdge(t){const e=this.edges[t];this.edges.splice(t,1),void 0!==e.toVertex&&delete this.upstreamEdges[e.toVertex][e.toInput],void 0!==e.fromVertex&&this.downstreamEdges[e.fromVertex].splice(this.downstreamEdges[e.fromVertex].indexOf(t),1),void 0!==e.fromVertex&&0==this.downstreamEdges[e.fromVertex].length&&this.rootVertices.push(e.fromVertex),this.vertices.forEach((e,s)=>{this.upstreamEdges[s].forEach((e,i)=>{e>t&&(this.upstreamEdges[s][i]=e-1)}),this.downstreamEdges[s].forEach((e,i)=>{e>t&&(this.downstreamEdges[s][i]=e-1)})})}connectedComponents(t){return t.filter(e=>this.downstreamEdges[e].reduce((e,s)=>e&&t.indexOf(this.edges[s].toVertex)<0,!0)).map(e=>{let s={vertices:[],rootVertex:e,internalEdges:[],inputEdges:[],outputEdges:[]};const i=e=>{s.vertices.push(e);const n=this.downstreamEdges[e].filter(e=>t.indexOf(this.edges[e].toVertex)<0);s.outputEdges.push(...n);const r=this.upstreamEdges[e].filter(e=>t.indexOf(this.edges[e].fromVertex)<0);s.inputEdges.push(...r);const o=this.upstreamEdges[e].filter(e=>t.indexOf(this.edges[e].fromVertex)>=0);s.internalEdges.push(...o);let h=o.map(t=>this.edges[t].fromVertex);h=h.filter((t,e,s)=>s.indexOf(t)==e),h.forEach(t=>{i(t)})};return i(e),s})}bypassEdges(t){let e=[];return t.inputEdges.length>=1&&t.outputEdges.forEach(s=>{const i=this.edges[s];i.fromVertex==t.rootVertex&&e.push({fromVertex:this.edges[t.inputEdges[0]].fromVertex,toVertex:i.toVertex,toInput:i.toInput})}),e}verticesBetween(t,e){let s=[];const i=(t,e)=>{const n=t[t.length-1];n==e?s.push(...t):this.downstreamVertexIndices(n).forEach(s=>{t.indexOf(s)<0&&i(t.concat([s]),e)})};return i([t],e),i([e],t),s=s.filter((t,e,s)=>s.indexOf(t)==e),s}}class n extends HTMLElement{constructor(){super(),this.nInputs=0,this.inputHeights=[],this.uid=null,this.offsetX=0,this.offsetY=0,this.dragging=!1,this.mouseDrag=!1,this.touchDrag=!1,this.ccDrag=!1,this._selected=!1}connectedCallback(){const t=this.attachShadow({mode:"open"});t.innerHTML='\n            <style>\n            :host {\n                display: block;\n                padding: 15px 0px;\n                position: absolute;\n                top: 0px;\n                left: 0px;\n                box-sizing: border-box;\n                z-index: 0;\n                outline: none;\n                pointer-events: none;\n                will-change: transform;\n                transition: transform 1s, width 1s, height 1s, opacity 0.5s, z-index 1s;\n            }\n\n            :host(:focus) {\n                transition: transform 1s, width 1s, height 1s, opacity 0.5s, z-index 0s;\n                z-index: 1001;\n            }\n\n            :host([dragging]) {\n                opacity: 0.5;\n                z-index: 1000;\n                transition: transform 0s, width 0s, height 0s, opacity 0.5s, z-index 0s;\n            }\n\n            :host(:focus) #outline {\n                border: 2px solid white;\n            }\n\n            :host([selected]) #inner {\n                background-color: #000066;\n            }\n\n            #inner {\n                box-sizing: border-box;\n                width: 100%;\n                height: 100%;\n                background-color: black;\n                text-align: center;\n                color: white;\n                padding: 5px;\n                display: flex;\n                flex-direction: column;\n                justify-content: center;\n                align-items: center;\n                pointer-events: all;\n            }\n\n            #outline {\n                pointer-events: none;\n                position: absolute;\n                left: -1px;\n                right: -1px;\n                top: 14px;\n                bottom: 14px;\n                border: 2px solid gray;\n            }\n            </style>\n            <div id="inner">\n                <slot></slot>\n                <div id="outline"></div>\n            </div>\n        ',this.inner=t.querySelector("#inner"),this.inner.addEventListener("mousedown",this.mouseDown.bind(this)),document.addEventListener("mouseup",this.mouseUp.bind(this)),document.addEventListener("mousemove",this.mouseMove.bind(this)),this.inner.addEventListener("touchstart",this.touchStart.bind(this),{passive:!1}),document.addEventListener("touchend",this.touchEnd.bind(this)),document.addEventListener("touchmove",this.touchMove.bind(this)),this.tabIndex=0,this.addEventListener("keypress",this.keyPress.bind(this)),this.addEventListener("wheel",this.onScroll.bind(this))}width(){return 110}minInputHeight(t){return 200}height(){return this.inputHeights.reduce((t,e)=>t+e,0)}updateSize(){this.style.height=this.height()+"px",this.style.width=this.width()+"px"}render(){this.preview&&this.preview.render(this)}updateFromState(t){"nInputs"in t&&t.nInputs!=this.nInputs&&(this.nInputs=t.nInputs,this.graph.requestRelayout())}touchStart(t){for(let e=0;e<t.changedTouches.length;e++){let s=t.changedTouches.item(e);s.target!=this.inner&&s.target!=this.inner||(this.dragging||(this.touchDrag=!0,this.touchId=s.identifier,this.dragCtrl=t.ctrlKey,this.dragShift=t.shiftKey,this.dragSelected=this.selected,this.graph.ensureSelected(this,this.dragCtrl,this.dragShift),this.focus(),this.startDrag(s.pageX,s.pageY),t.preventDefault()))}}mouseDown(t){t.target!=this.inner&&t.target!=this.inner||!this.dragging&&1&t.buttons&&(this.mouseDrag=!0,this.dragCtrl=t.ctrlKey,this.dragShift=t.shiftKey,this.dragSelected=this.selected,this.graph.ensureSelected(this,this.dragCtrl,this.dragShift),this.focus(),this.startDrag(t.pageX,t.pageY),t.preventDefault())}touchEnd(t){for(let e=0;e<t.changedTouches.length;e++){let s=t.changedTouches.item(e);this.dragging&&this.touchDrag&&this.touchId==s.identifier&&(this.touchDrag=!1,this.endDrag())}}mouseUp(t){!this.dragging||!this.mouseDrag||1&t.buttons||(this.mouseDrag=!1,this.endDrag(),t.preventDefault())}touchMove(t){for(let e=0;e<t.changedTouches.length;e++){let s=t.changedTouches.item(e);this.dragging&&this.touchDrag&&this.touchId==s.identifier&&this.drag(s.pageX,s.pageY)}}mouseMove(t){this.dragging&&this.mouseDrag&&(this.drag(t.pageX,t.pageY),t.preventDefault())}startDrag(t,e){if(this.dragging)throw"Cannot start drag while drag in progress";this.dragging=!0,this.startDragX=t,this.startDragY=e,this.wasClick=!0}endDrag(){this.dragging=!1,this.offsetX=0,this.offsetY=0,this.removeAttribute("dragging"),this.updateLocation(),this.wasClick?this.graph.select(this,this.dragSelected,this.dragCtrl,this.dragShift):this.ccDrag||this.graph.endDragCC()}drag(t,e){this.wasClick&&(this.wasClick=!1,this.setAttribute("dragging","true"),this.ccDrag||this.graph.startDragCC(this,this.startDragX,this.startDragY)),this.ccDrag||this.graph.dragCC(t,e),this.offsetX=t-this.startDragX,this.offsetY=e-this.startDragY,this.updateLocation()}updateLocation(){const t=this.width(),e=this.height();t!=this.oldWidth&&(this.style.width=t+"px",this.oldWidth=t),e!=this.oldHeight&&(this.style.height=e+"px",this.oldHeight=e),this.style.transform=`translate(${this.x+this.offsetX}px, ${this.y+this.offsetY}px)`}get selected(){return this._selected}set selected(t){this._selected=t,t?this.setAttribute("selected","true"):this.removeAttribute("selected")}keyPress(t){if("Delete"==t.code)this.graph.deleteSelected();else if("Space"==t.code){const t=Array.from(this.graph.tiles.vertices.keys()).filter(t=>this.graph.tiles.vertices[t].selected);console.log("Connected components:"),this.graph.tiles.connectedComponents(t).forEach(t=>{console.log(t)})}}onScroll(t){this.graph.onScroll(t),t.preventDefault()}}class r extends HTMLElement{constructor(){super()}connectedCallback(){const t=this.attachShadow({mode:"open"});t.innerHTML='\n            <style>\n            :host {\n                display: block;\n                width: 80%;\n                pointer-events: none;\n            }\n            #square {\n                position: relative;\n                width: 100%;\n                margin: 10px auto;\n            }\n            #square:after {\n                content: "";\n                display: block;\n                padding-bottom: 100%;\n            }\n            #content {\n                position: absolute;\n                width: 100%;\n                height: 100%;\n                border: 1px solid white;\n                background-color: gray;\n            }\n            </style>\n            <div id="square">\n                <div id="content">\n                </div>\n            </div>\n        ',this.content=t.querySelector("#content")}render(t){t.dragging&&t.graph.context.clearElement(t.inner),t.graph.context.paintNode(t.uid,this.content)}}class o extends HTMLElement{constructor(){super(),this._active=!1,this._dragging=!1}connectedCallback(){const t=this.attachShadow({mode:"open"});t.innerHTML='\n            <style>\n            :host {\n                display: block;\n                position: absolute;\n                top: 0px;\n                left: 0px;\n                width: 0px;\n                height: 0px;\n                box-sizing: border-box;\n                z-index: 1;\n                outline: none;\n                pointer-events: all;\n                will-change: opacity;\n                transition: opacity 0.2s;\n                opacity: 0;\n            }\n\n            :host(:not([dragging])) {\n                display: none;\n            }\n\n            :host([active]) {\n                opacity: 1;\n            }\n\n            #inner {\n                position: absolute;\n                width: 50px;\n                height: 200px;\n                left: -25px;\n                top: -100px;\n                background-image: radial-gradient(closest-side, yellow, transparent);\n            }\n            </style>\n            <div id="inner">\n            </div>\n        ',this.inner=t.querySelector("#inner")}updateLocation(){this.style.transform=`translate(${this.x}px, ${this.y}px)`}get active(){return this._active}set active(t){t&&!this._active?this.setAttribute("active","true"):!t&&this._active&&this.removeAttribute("active"),this._active=t}get dragging(){return this._dragging}set dragging(t){t&&!this._dragging?this.setAttribute("dragging","true"):!t&&this._dragging&&this.removeAttribute("dragging"),this._dragging=t}}class h extends HTMLElement{constructor(){super(),this.nextUID=0,this.relayoutRequested=!1,this.dropTargets=[],this.tiles=new i([],[])}connectedCallback(){this.attachShadow({mode:"open"}).innerHTML="\n            <style>\n            :host {\n                display: inline-block;\n                pointer-events: none;\n                transition: width 1s, height 1s;\n            }\n            * {\n                pointer-events: auto;\n            }\n            </style>\n            <slot></slot>\n        "}attachContext(t){if(void 0!==this.context)throw"Cannot call attachContext more than once!";this.context=t,this.context.onGraphChanged(this.nodesChanged.bind(this)),this.nodesChanged(),window.requestAnimationFrame(this.render.bind(this))}addTile(t,e){const s=e.nodeType;let i;return i="EffectNode"==s?document.createElement("radiance-effectnodetile"):"MediaNode"==s?document.createElement("radiance-medianodetile"):document.createElement("radiance-videonodetile"),this.appendChild(i),i.uid=t,i.graph=this,i.updateFromState(e),this.context.onNodeChanged(t,"all",i.updateFromState.bind(i)),i}removeTile(t){this.removeChild(t)}addDropTarget(t,e,s){const i=document.createElement("radiance-droptarget");return i.fromUID=t,i.toUID=e,i.toInput=s,this.appendChild(i),this.dropTargets.push(i),i}removeDropTargets(){this.dropTargets.forEach(t=>{this.removeChild(t)}),this.dropTargets=[]}nodesChanged(){let t=this.context.state();this.nodes=new i(t.vertices,t.edges);const e=this.tiles.vertices.length;let s={};this.tiles.vertices.forEach((t,e)=>{s[t.uid]=e});let n=Array.from(this.tiles.vertices.keys()),r=Array.from(this.tiles.edges.keys()),o=[];const h=(t,e)=>{const s=this.tiles.vertices[e];for(let i=0;i<s.nInputs;i++){let s=this.nodes.upstreamVertexIndex(t,i);if(void 0!==s){const t=this.nodes.vertices[s],d=this.tiles.upstreamEdges[e][i];let a;if(void 0!==d){const e=this.tiles.edges[d].fromVertex,i=this.tiles.vertices[e];i.uid==t&&(n.splice(n.indexOf(e),1),r.splice(r.indexOf(d),1),i.updateFromState(this.context.nodeState(this.nodes.vertices[s],"all")),a=e)}if(void 0===a){for(let e of n)if(this.tiles.vertices[e].uid==t){a=e,n.splice(n.indexOf(a),1),this.tiles.vertices[a].updateFromState(this.context.nodeState(this.nodes.vertices[s],"all"));break}if(void 0===a){const e=this.context.nodeState(this.nodes.vertices[s],"all"),i=this.addTile(t,e);a=this.tiles.addVertex(i),i.uid==this.selectUID&&(this.select(i,!1,!1,!1),i.focus(),this.selectUID=void 0)}o.push({fromVertex:a,toVertex:e,toInput:i})}h(s,a)}}};this.nodes.rootVertices.forEach(t=>{const e=this.nodes.vertices[t];let i;if(e in s)i=s[e],n.splice(n.indexOf(i),1);else{const s=this.context.nodeState(this.nodes.vertices[t],"all");let n=this.addTile(e,s);n.uid=e,i=this.tiles.addVertex(n)}h(t,i)});const d=this.tiles.vertices.length>e||o.length>0||n.length>0||r.length>0;n.forEach(t=>{this.removeTile(this.tiles.vertices[t])}),this.tiles.removeEdges(r),o.forEach(t=>{this.tiles.addEdge(t)}),this.tiles.removeVertices(n),d&&(console.log("New tile vertices:",this.tiles.vertices),console.log("New tile edges:",this.tiles.edges),console.log("Vertices to remove:",n),console.log("Edges to remove:",r),this.relayoutGraph(),this.relayoutDropTargets())}relayoutGraph(){const t=e=>{let s=this.tiles.vertices[e];s.inputHeights=[];for(let i=0;i<s.nInputs;i++){let n=s.minInputHeight(i),r=this.tiles.upstreamVertexIndex(e,i);void 0!==r&&(t(r),n=Math.max(n,this.tiles.vertices[r].height())),s.inputHeights.push(n)}0==s.nInputs&&s.inputHeights.push(s.minInputHeight(0))};for(let e of this.tiles.rootVertices)t(e);const e=t=>{let e=this.tiles.vertices[t],s=e.height(),i=this.tiles.downstreamVertexIndices(t)[0];if(void 0!==i){let t=this.tiles.vertices[i].height()/s;if(t>1)for(let s=0;s<e.nInputs;s++)e.inputHeights[s]*=t}};for(let t of this.tiles.rootVertices)e(t);const s=(t,e)=>{let i=this.tiles.vertices[t];i.y=e;for(let n=0;n<i.nInputs;n++){let r=this.tiles.upstreamVertexIndex(t,n);void 0!==r&&s(r,e),e+=i.inputHeights[n]}};let i=0;for(let t of this.tiles.rootVertices)s(t,i),i+=this.tiles.vertices[t].height();let n=i;const r=(t,e)=>{let s=this.tiles.vertices[t];s.x=e,e-=s.width();for(let i=0;i<s.nInputs;i++){let s=this.tiles.upstreamVertexIndex(t,i);void 0!==s&&r(s,e)}};for(let t of this.tiles.rootVertices)r(t,-this.tiles.vertices[t].width());let o=0;this.tiles.vertices.forEach(t=>{t.x<o&&(o=t.x)}),this.tiles.vertices.forEach(t=>{t.x-=o});let h=-o;this.oldWidth!=h&&(this.style.width=h+"px",this.oldWidth=h),this.oldHeight!=n&&(this.style.height=n+"px",this.oldHeight=n);for(let t in this.tiles.vertices){this.tiles.vertices[t].updateLocation()}}requestRelayout(){this.relayoutRequested=!0}relayoutDropTargets(){this.removeDropTargets(),this.tiles.vertices.forEach((t,e)=>{let s=0;for(let i=0;i<t.nInputs;i++){const n=this.tiles.upstreamVertexIndex(e,i);let r=null;void 0!==n&&(r=this.tiles.vertices[n].uid);const o=t.uid,h=i,d=this.addDropTarget(r,o,h);d.x=t.x,d.y=t.y+s+.5*t.inputHeights[i],s+=t.inputHeights[i]}}),this.tiles.rootVertices.forEach(t=>{const e=this.tiles.vertices[t],s=this.addDropTarget(e.uid,null,null);s.x=e.x+e.width(),s.y=e.y+.5*e.height()}),this.dropTargets.forEach(t=>{t.updateLocation()})}render(t){this.relayoutRequested&&(this.relayoutRequested=!1,this.relayoutGraph()),this.context.render(t),this.tiles.vertices.forEach(t=>{t.render()}),window.requestAnimationFrame(this.render.bind(this))}ensureSelected(t,e,s){t.selected||(e||s?s&&this.selectBetween(this.lastTile,t):this.deselectAll(),t.selected=!0)}select(t,e,s,i){e?i?this.selectBetween(this.lastTile,t):s?t.selected=!1:(this.deselectAll(),t.selected=!0):(s||i||this.deselectAll(),t.selected=!0),this.lastTile=t}deselectAll(){this.tiles.vertices.forEach(t=>{t.selected=!1})}addEdge(t){this.context.addEdge(this.nodes.vertices[t.fromVertex],this.nodes.vertices[t.toVertex],t.toInput)}removeEdgeByIndex(t){const e=this.nodes.edges[t];this.context.removeEdge(this.nodes.vertices[e.fromVertex],this.nodes.vertices[e.toVertex],e.toInput)}deleteSelected(){let t=[];this.tiles.vertices.forEach(e=>{e.selected&&t.indexOf(e.uid)<0&&t.push(e.uid)});const e=Array.from(this.nodes.vertices.keys()).filter(e=>t.indexOf(this.nodes.vertices[e])>=0),s=this.nodes.connectedComponents(e);let i=[];s.forEach(t=>{i.push(...this.nodes.bypassEdges(t))}),t.forEach(t=>{this.context.removeNode(t)}),i.forEach(t=>{this.addEdge(t)}),this.context.flush()}startDragCC(t,e,s){const i=this.tiles.vertices.indexOf(t);if(i<0)throw"Dragged tile not found in graph";const n=Array.from(this.tiles.vertices.keys()).filter(t=>this.tiles.vertices[t].selected||t==i);let r;for(const t of this.tiles.connectedComponents(n))if(t.vertices.indexOf(i)>=0){r=t;break}if(void 0===r)throw"No connected component contains the chosen tile";this.currentDragCC=r,this.currentDragCC.vertices.forEach(t=>{t!=i&&(this.tiles.vertices[t].ccDrag=!0,this.tiles.vertices[t].startDrag(e,s))})}dragCC(t,e){this.tiles.vertices.forEach(s=>{s.ccDrag&&s.drag(t,e)}),this.activateDropTarget(t,e)}endDragCC(){this.tiles.vertices.forEach(t=>{t.ccDrag&&(t.endDrag(),t.ccDrag=!1)}),this.drop()}activateDropTarget(t,e){const s=document.elementsFromPoint(t,e);let i;for(const t of s)if(!(t instanceof n)){i=t;break}const r=this.dropTargets.indexOf(i);this.dropTargets.forEach((t,e)=>{t.active=e==r,t.dragging=!0})}drop(){let t;if(this.dropTargets.forEach((e,s)=>{e.active&&(t=e),e.active=!1,e.dragging=!1}),void 0===t)return;let e=[];this.currentDragCC.vertices.forEach(t=>{const s=this.tiles.vertices[t].uid;e.indexOf(s)<0&&e.push(s)});const s=Array.from(this.nodes.vertices.keys()).filter(t=>e.indexOf(this.nodes.vertices[t])>=0),i=this.nodes.connectedComponents(s);if(1!=i.length)throw"Conversion of CC in tilespace to nodespace resulted in more than one CC";const n=i[0];for(let e of n.vertices){const s=this.nodes.vertices[e];if(t.fromUID==s||t.toUID==s)return void console.log("Can't drop onto an edge that is part of the lifted CC")}if(n.inputEdges.forEach(t=>{this.removeEdgeByIndex(t)}),n.outputEdges.forEach(t=>{this.removeEdgeByIndex(t)}),null!==t.fromUID&&null!==t.toUID&&null!==t.toInput&&this.context.removeEdge(t.fromUID,t.toUID,t.toInput),this.nodes.bypassEdges(n).forEach(t=>{this.addEdge(t)}),null!==t.fromUID){let e=n.rootVertex;for(;!(this.context.nodeState(this.nodes.vertices[e],"all").nInputs<1);){const s=this.nodes.upstreamVertexIndex(e,0);if(void 0===s||n.vertices.indexOf(s)<0){this.nodes.edges[n.inputEdges[0]];this.context.addEdge(t.fromUID,this.nodes.vertices[e],0);break}e=s}}if(null!==t.toUID&&null!==t.toInput){const e=this.nodes.vertices[n.rootVertex];this.context.addEdge(e,t.toUID,t.toInput)}this.context.flush()}selectBetween(t,e){const s=this.tiles.vertices.indexOf(t),i=this.tiles.vertices.indexOf(e);console.log("Select between",s,i),s>=0&&i>=0?this.tiles.verticesBetween(s,i).forEach(t=>{this.tiles.vertices[t].selected=!0}):(t.selected=!0,e.selected=!0)}addNode(t){const e=this.context.addNode(t);if(void 0===e)return void console.log("Error adding node");let s=-1;if(void 0!==this.lastTile&&(s=this.nodes.vertices.indexOf(this.lastTile.uid)),s>=0){const t=this.nodes.downstreamEdges[s],i=t.map(t=>({fromUID:e,toUID:this.nodes.vertices[this.nodes.edges[t].toVertex],toInput:this.nodes.edges[t].toInput}));i.push({fromUID:this.nodes.vertices[s],toUID:e,toInput:0}),t.forEach(t=>{this.removeEdgeByIndex(t)}),i.forEach(t=>{this.context.addEdge(t.fromUID,t.toUID,t.toInput)})}this.selectUID=e,this.context.flush()}adjustSelected(t){const e=new CustomEvent("adjust",{detail:t});this.tiles.vertices.forEach(t=>{t.selected&&t.dispatchEvent(e)})}onScroll(t){this.adjustSelected({control:0,amountRelative:-3e-4*t.deltaY})}}customElements.define("radiance-videonodetile",n),customElements.define("radiance-videonodepreview",r),customElements.define("radiance-graph",h),customElements.define("radiance-droptarget",o);class d extends HTMLElement{constructor(){super()}connectedCallback(){const t=this.attachShadow({mode:"open"});t.innerHTML="\n            <style>\n            :host {\n                display: inline-block;\n            }\n            #outer {\n                display: flex;\n                width: 100%;\n                height: 100%;\n                justify-content:center;\n                align-items:center;\n                overflow: hidden;\n            }\n            #inner {\n                border: 30px solid transparent;\n            }\n            </style> \n            <div id='outer'>\n                <div id='inner'>\n                    <slot></slot>\n                </div>\n            </div>\n        ",this.inner=t.querySelector("#inner"),this.outer=t.querySelector("#outer"),this.outer.addEventListener("mousedown",this.mouseDown.bind(this)),document.addEventListener("mouseup",this.mouseUp.bind(this)),document.addEventListener("mousemove",this.mouseMove.bind(this)),this.outer.addEventListener("touchstart",this.touchStart.bind(this),{passive:!1}),document.addEventListener("touchend",this.touchEnd.bind(this)),document.addEventListener("touchmove",this.touchMove.bind(this)),this.resizeObserver=new ResizeObserver(t=>{this.applyTransformation()}),this.resizeObserver.observe(this.outer),this.resizeObserver.observe(this.inner),this.offsetX=0,this.offsetY=0}applyTransformation(){let t=.5*Math.max(0,this.inner.offsetWidth-this.outer.clientWidth),e=.5*Math.max(0,this.inner.offsetHeight-this.outer.clientHeight);Math.abs(this.offsetX)>t&&(this.offsetX=t*Math.sign(this.offsetX)),Math.abs(this.offsetY)>e&&(this.offsetY=e*Math.sign(this.offsetY)),this.inner.style.transform=`translate(${this.offsetX}px, ${this.offsetY}px)`}touchStart(t){for(let e=0;e<t.changedTouches.length;e++){let s=t.changedTouches.item(e);s.target!=this.outer&&s.target!=this.inner||(this.dragging||(this.touchDrag=!0,this.touchId=s.identifier,this.startDrag(s.pageX,s.pageY),t.preventDefault()))}}mouseDown(t){t.target!=this.outer&&t.target!=this.inner||!this.dragging&&1&t.buttons&&(this.mouseDrag=!0,this.startDrag(t.pageX,t.pageY),t.preventDefault())}touchEnd(t){for(let e=0;e<t.changedTouches.length;e++){let s=t.changedTouches.item(e);this.dragging&&this.touchDrag&&this.touchId==s.identifier&&(this.touchDrag=!1,this.endDrag())}}mouseUp(t){!this.dragging||!this.mouseDrag||1&t.buttons||(this.mouseDrag=!1,this.endDrag(),t.preventDefault())}touchMove(t){for(let e=0;e<t.changedTouches.length;e++){let s=t.changedTouches.item(e);this.dragging&&this.touchDrag&&this.touchId==s.identifier&&this.drag(s.pageX,s.pageY)}}mouseMove(t){this.dragging&&this.mouseDrag&&(this.drag(t.pageX,t.pageY),t.preventDefault())}startDrag(t,e){this.dragging=!0,this.startDragX=t,this.startDragY=e,this.startDragOffsetX=this.offsetX,this.startDragOffsetY=this.offsetY}endDrag(){this.dragging=!1}drag(t,e){this.offsetX=this.startDragOffsetX+t-this.startDragX,this.offsetY=this.startDragOffsetY+e-this.startDragY,this.applyTransformation()}}customElements.define("radiance-flickable",d);customElements.define("radiance-effectnodetile",class extends n{constructor(){super(),this.nInputs=0,this.intensitySliderBlocked=!1}connectedCallback(){super.connectedCallback(),this.innerHTML='\n            <style>\n                hr, div {\n                    pointer-events: none;\n                }\n            </style>\n            <div style="font-family: sans-serif;" id="title"></div>\n            <hr style="margin: 3px; width: 80%;"></hr>\n            <radiance-videonodepreview style="flex: 1 1 auto;" id="preview"></radiance-videonodepreview>\n            <input type="range" min="0" max="1" step="0.01" id="intensitySlider"></input>\n        ',this.preview=this.querySelector("#preview"),this.intensitySlider=this.querySelector("#intensitySlider"),this.titleDiv=this.querySelector("#title"),this.intensitySlider.addEventListener("input",this.intensitySliderChanged.bind(this)),this.addEventListener("adjust",this.onAdjust.bind(this))}updateFromState(t){super.updateFromState(t),"intensity"in t&&(this.intensitySliderBlocked=!0,this.intensitySlider.value=t.intensity,this.intensitySliderBlocked=!1),"name"in t&&(this.titleDiv.textContent=t.name)}intensitySliderChanged(){if(this.intensitySliderBlocked)return;const t=parseFloat(this.intensitySlider.value);let e=this.graph.context.nodeState(this.uid,"local");e.intensity=t,this.graph.context.setNodeState(this.uid,e)}onAdjust(t){const e=t.detail;this.intensitySlider.value=(parseFloat(this.intensitySlider.value)+e.amountRelative).toString(),this.intensitySliderChanged()}}),customElements.define("radiance-medianodetile",class extends n{constructor(){super(),this.nInputs=1}connectedCallback(){super.connectedCallback(),this.innerHTML='\n            <div style="font-family: sans-serif;" id="title">Media</div>\n            <hr style="margin: 3px; width: 80%;"></hr>\n            <radiance-videonodepreview style="flex: 1 1 auto;" id="preview"></radiance-videonodepreview>\n        ',this.preview=this.querySelector("#preview")}});class a extends HTMLElement{connectedCallback(){const t=this.attachShadow({mode:"open"});t.innerHTML='\n            <style>\n            :host {\n                display: flex;\n                flex-direction: column;\n            }\n\n            #list {\n                display: flex;\n                flex: 1;\n                margin: 10px;\n                overflow: hidden scroll;\n            }\n\n            #nodeName {\n                width: 100%;\n            }\n            </style>\n            <div id="list" width></div>\n            <input type="text" id="nodeName"></input>\n        ',this.nodeNameInput=t.querySelector("#nodeName"),this.list=t.querySelector("#list"),document.addEventListener("keypress",this.onKeyPress.bind(this)),this.nodeNameInput.addEventListener("keydown",this.onTextBoxKeyPress.bind(this)),this.nodeNameInput.addEventListener("input",this.onTextBoxInput.bind(this))}attachGraph(t){if(void 0!==this.graph)throw"Cannot call attachGraph more than once!";this.graph=t,this.context=t.context,this.context.onLibraryChanged(this.libraryChanged.bind(this)),this.libraryChanged()}renderLibrary(){const t=this.nodeNameInput.value;let e;if(""==t)e=this.library,this.bestMatch=void 0;else{e={};for(const s in this.library){const i=this.library[s];"name"in i&&i.name.startsWith(t)&&(e[s]=i)}this.bestMatch=Object.keys(e)[0]}const s=document.createElement("ul");this.list.innerHTML="",this.list.appendChild(s);for(const t in e){const i=document.createElement("li");i.textContent=e[t].name,i.addEventListener("click",e=>{this.instantiateFromLibrary(t),this.done()}),s.appendChild(i)}}libraryChanged(){this.library=this.context.library(),this.renderLibrary()}instantiateFromLibrary(t){void 0!==this.graph&&this.graph.addNode(this.library[t])}onKeyPress(t){"Semicolon"==t.code&&t.shiftKey&&t.target!=this&&(this.nodeNameInput.focus(),t.preventDefault())}onTextBoxInput(t){this.renderLibrary()}done(){this.nodeNameInput.value="",this.renderLibrary(),this.blur()}onTextBoxKeyPress(t){"Enter"==t.code?(void 0!==this.bestMatch&&this.instantiateFromLibrary(this.bestMatch),this.done()):"Escape"==t.key&&this.done()}}customElements.define("radiance-library",a);class c extends HTMLElement{constructor(){super(),this._closed=!1}connectedCallback(){const t=this.attachShadow({mode:"open"});t.innerHTML='\n            <style>\n            :host {\n                display: inline-block;\n                overflow: hidden;\n                pointer-events: none;\n            }\n\n            #outer {\n                position: static;\n                display: inline-block;\n                width: 100%;\n                height: 100%;\n                will-change: transform;\n                transition: transform 0.5s;\n                pointer-events: all;\n                background-color: #333333EE; /* TODO expose this outside of this element */\n            }\n\n            #inner {\n                width: 100%;\n                height: 100%;\n                transition: opacity 0.5s;\n                padding: 10px;\n                padding-right: 30px;\n                box-sizing: border-box;\n            }\n\n            #handle {\n                position: absolute;\n                right: 0px;\n                width: 20px;\n                top: 0px;\n                bottom: 0px;\n                background-color: white;\n            }\n\n            :host([closed]) #outer {\n                transform: translate(calc(-100% + 10px), 0px);\n            }\n            </style>\n            <div id="outer">\n                <div id="inner">\n                    <slot></slot>\n                </div>\n                <div id="handle">\n            </div>\n            </div>\n        ',this.handle=t.querySelector("#handle"),this.handle.addEventListener("click",this.onClick.bind(this)),this._closed=this.hasAttribute("closed"),Array.from(this.children).forEach(t=>{t.addEventListener("focus",this.checkChildFocus.bind(this)),t.addEventListener("blur",this.checkChildFocus.bind(this))})}onClick(t){this.closed=!this.closed}get closed(){return this._closed}set closed(t){t&&!this._closed?this.setAttribute("closed","true"):!t&&this._closed&&this.removeAttribute("closed"),this._closed=t}checkChildFocus(t){const e=Array.from(this.children).reduce((t,e)=>t||e==document.activeElement,!1);this.closed=!e}}customElements.define("radiance-drawer",c);class l extends HTMLElement{constructor(){super(),this.timestamps=[],this.historyLength=15}connectedCallback(){this.shadow=this.attachShadow({mode:"open"}),this.shadow.textContent="FPS: ???",window.requestAnimationFrame(this.onFrame.bind(this))}onFrame(t){this.timestamps.push(t),this.timestamps.length>this.historyLength&&(this.timestamps=this.timestamps.slice(-this.historyLength));const e=this.timestamps[0],s=this.timestamps.length-1;if(s>0){const i=Math.round(s/(.001*(t-e)));this.shadow.textContent="FPS: "+i}window.requestAnimationFrame(this.onFrame.bind(this))}}customElements.define("radiance-fps-counter",l)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,